<apex:page Controller="FinancialsFeatureDHTMLXController" showHeader="false" sidebar="false" standardStylesheets="true" docType="html-5.0">

    <apex:includeScript value="{!URLFOR($Resource.jquery)}" />
    <apex:includeScript value="{!URLFOR($Resource.DHTMLX, '/codebase/dhtmlx.js')}" />
    <apex:stylesheet value="{!URLFOR($Resource.DHTMLX, '/skins/material/dhtmlx.css')}" />
    <apex:stylesheet value="{!URLFOR($Resource.DHTMLX, '/skins/terrace/dhtmlx.css')}" />
    <apex:stylesheet value="{!URLFOR($Resource.DHTMLX, '/skins/web/dhtmlx.css')}" />
    <apex:stylesheet value="{!URLFOR($Resource.DHTMLX, '/skins/skyblue/dhtmlx.css')}" />

    <apex:includeScript value="{!URLFOR($Resource.tributejs, '/tribute-master/dist/tribute.js')}" />
    <apex:stylesheet value="{!URLFOR($Resource.tributejs, '/tribute-master/dist/tribute.css')}" />


    <apex:includeScript value="/soap/ajax/26.0/connection.js" />



    <style type="text/css" media="screen">
        html,
        body {
            margin: 0px;
            padding: 0px;
            height: 100%;
            overflow: hidden !important;
        }

        .dhxwins_vp_auto {
            overflow: hidden !important;
        }

        div#layoutObj {
            position: relative;
            /*margin-top: 15px;*/
            margin-left: 0px;
            width: 100%;
            /*height: 364px;*/
        }

        .uneven {
            background-color: #f3f3f3a1;
        }

        a {
            text-decoration: none;
        }

        a:hover {
            text-decoration: underline;
        }

        /*div.gridbox_material.gridbox table.obj tr td {
            border-bottom: 1px solid rgb(205, 202, 202);
        }*/

        .grid_hover {
            background-color: #f9d3f136;
        }

        div.gridbox_material.gridbox table.obj tr td,
        .dhx_grid_adjust,
        .standartTreeRow {
            font-size: 13px;
        }

        .dhx_cell_hdr_text input {
            display: none;
        }

        /*td {
            text-align: left;
            padding-left: 10px !important;
        }*/

        /*div.gridbox_dhx_terrace.gridbox table.obj tr td {
            padding-left: 5px;
            padding-right: 5px;
        }

        div.gridbox_dhx_terrace.gridbox table.hdr td div.hdrcell {
            padding-left: 5px;
        }

        .hdrcell {
            padding-left: 0px!important;
        }

        .dhxtree_dhx_terrace span.selectedTreeRow {
            background-color: #d9eaff !important;
        }*/

        .dhtmlx-info a {
            text-decoration: underline;
        }

        .dhx_combo_edit {
            text-align: left;
        }

        div.gridbox div.ftr td {
            font-style: normal !important;
            background-color: #e2efff;
            border: none;
            /*border-bottom: 1px solid rgb(205, 202, 202);
            border-right: 1px solid #dfdfdf !important;*/
        }

        div.gridbox_dhx_terrace.gridbox .ftr table td {
            line-height: 21px !important;
        }

        .group_row {
            border: none !important;
        }

        .hdr td {
            /*border-right: 1px solid #dfdfdf !important;*/
        }

        .popupDiv {
            padding: 10px;
            margin: 8px 0px 0px -35px;
            line-height: 1.25em;
            position: fixed;
            display: none;
            z-index: 999;
            z-index: 999;
            background: white;
            border-radius: .25rem;
            min-width: 200px;
            width: max-content;
            min-height: 2rem;
            box-shadow: 0 2px 3px 0 rgba(0, 0, 0, 0.16);
            border: 1px solid rgb(221, 219, 218);
        }

        /*div.gridbox_material.gridbox table.hdr td.dhxgrid_sort_desc_col div,
        div.gridbox_material.gridbox table.hdr td.dhxgrid_sort_asc_col div {
            padding-left: 6px !important;
        }*/

        .popupFieldLabel {
            float: left;
            clear: both;
            text-transform: uppercase;
        }

        .popupFieldValue {
            margin-left: 15px;
            float: right;
        }

        .td_btn_img {
            display: none
        }

        /*.xhdr table,
        .ftr table {
            padding-right: 0px !important;
        }*/

        #wrapper {
            height: 400px;
        }

        .tribute-container li {
            margin-left: 0px !important;
        }

        .objbox img {
            height: 17px;
            opacity: 0.6;
        }

        div.gridbox_dhx_terrace.gridbox table.obj tr td {
            padding-left: 10px !important;
        }

        .dhx_toolbar_dhx_terrace {
            padding: 0px;
        }
    </style>

    <body id="body">
        <div id="wrapper">
            <div id="toolbarObj" style="height:35px"></div>
            <div id="layoutObj">

            </div>
            <br/>
            <br/>
            <br/>
        </div>

        <script type="text/javascript">

            var tribute = new Tribute({
                collection: [{
                    trigger: '{',
                    selectTemplate: function (item) {
                        return '{' + item.original.value + '}';
                    },
                    values: []
                }
                ]
            });

            function sendToLC(param, recordId) {
                let searchParams = new URLSearchParams(window.location.href);
                var lexOrigin = 'https://' + searchParams.get('returnUrl');
                var message = { param: param, recordId: recordId };
                parent.postMessage(message, lexOrigin);
            }

            var yPos;
            var xPos;
            $("body").mousemove(function (e) {
                yPos = e.pageY;
                xPos = e.pageX;
            })

            var formatter = new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD',
            });

            var ParentUrl = (window.location != window.parent.location) ? document.referrer : document.location.href;
            parent.postMessage('setBaseUrl' + '-del-' + document.location.href, ParentUrl);

            Date.prototype.monthNames = [
                "January", "February", "March",
                "April", "May", "June",
                "July", "August", "September",
                "October", "November", "December"
            ];
            Date.prototype.getMonthName = function () {
                return this.monthNames[this.getMonth()];
            };
            Date.prototype.getShortMonthName = function () {
                return this.getMonthName().substr(0, 3);
            };

            var vars = {};
            var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (m, key, value) {
                vars[key] = value;
            });
            var recordId = vars["recordId"];
            var dhtmlxSkin = vars["skin"];
            var communityName = vars["communityName"];
            var isCommunity;
            var componentHeight = vars["componentHeight"];
            var isAllowEditing;
            var accName;

            var jsRounds;
            var advancedEditWin;
            var RoundTooltip;
            var exportHeaderLabels;

            var componentHeightInt = Number(componentHeight);
            componentHeightInt = componentHeightInt - 36;
            document.getElementById("layoutObj").style.height = componentHeightInt + "px";

            var lSkin = "dhx_" + dhtmlxSkin;
            if (dhtmlxSkin == 'material') {
                lSkin = dhtmlxSkin;
            }

            if (dhtmlxSkin == 'material') {
                var sheet = document.createElement('style')
                sheet.innerHTML = ".dhxgrid_sort_desc, .dhxgrid_sort_asc {width:0px;} .selectedTreeRow {background-color: transparent;}";
                document.body.appendChild(sheet);
            }

            Toolbar = new dhtmlXToolbarObject({
                parent: "toolbarObj",
                icons_path: ("{!URLFOR($Resource.DHTMLX)}" + '/customIcons/')
            });


            Toolbar.attachEvent("onClick", function (id) {
                console.log(id);
                if (id == "new_board_meeting") {

                    var dhxWins = new dhtmlXWindows();
                    dhxWins.attachViewportTo("body");
                    dhxWins.setSkin(lSkin);
                    advancedEditWin = dhxWins.createWindow("w1", 0, 0, 400, 155);

                    advancedEditWin.setText("New Reporting Period");
                    advancedEditWin.center();
                    advancedEditWin.setModal(true);
                    advancedEditWin.button("park").hide();
                    advancedEditWin.button("minmax").hide();
                    var advancedEditWinLayout = advancedEditWin.attachLayout("1C");
                    advancedEditWinLayout.setSkin(lSkin);
                    advancedEditWinLayout.cells("a").hideHeader();


                    var formContent = [{ type: "block", list: [{ type: "calendar", label: "Date", name: 'date', required: true, skin: lSkin, dateFormat: "%Y-%m-%d", width: 240, offsetLeft: 40, offsetTop: 20 }] },
                    { type: "block", list: [{ type: "button", name: "save", value: "Save", offsetTop: 10, width: 80, offsetLeft: 90 }, { type: "newcolumn" }, { type: "button", name: "cancel", value: "Cancel", offsetTop: 10, width: 80, offsetLeft: 20 }] }
                    ];

                    var advancedEditWinForm = advancedEditWinLayout.cells("a").attachForm(formContent);


                    advancedEditWinForm.attachEvent("onButtonClick", function (name) {
                        if (advancedEditWinForm.validate() && name == 'save') {
                            let current_datetime = new Date(advancedEditWinForm.getItemValue('date'));
                            let formatted_date = current_datetime.getFullYear() + "-" + (current_datetime.getMonth() + 1) + "-" + current_datetime.getDate();
                            var request = { Date__c: formatted_date };
                            saveBoard(request, advancedEditWin);

                        } else if (name == 'cancel') {
                            advancedEditWin.close();
                        }
                    });
                } else if (id == 'save_template') {
                    openSaveTemplateWindow();
                } else if (id == 'load_template') {
                    openLoadTemplateWindow();
                } else if (id == 'new_metric') {
                    openAccountWindow(null);
                } else if (id == "Export") {
                    var csv = 'Record ID,' + exportHeaderLabels + '\n';
                    var columnDivider = ',';
                    CapSharesGrid.setCSVDelimiter("Æ");
                    s = CapSharesGrid.serializeToCSV().replaceAll('_blank', '');
                    var arrayOfStrings = s.split('Æ');

                    for (let cell of arrayOfStrings) {
                        if (cell.includes('\n')) {
                            var val = cell.substring(0, cell.lastIndexOf('\n'))
                            if (!isNaN(val) && val.toString().indexOf('.') != -1) {
                                val = parseFloat(cell).toFixed(2);
                            }
                            csv += val + '\n';
                            cell = cell.substring(cell.lastIndexOf('\n') + 1, cell.length);

                        }
                        if (cell.includes('^/')) {
                            csv += cell.substring(cell.indexOf('^/') + 2, cell.lastIndexOf('^')) + ',"' + cell.substring(0, cell.indexOf('^/')) + '",'
                        } else if (!isNaN(cell) && cell.toString().indexOf('.') != -1) {
                            var val = parseFloat(cell).toFixed(2);
                            csv += val + ',';
                        } else {
                            csv += cell + ',';
                        }

                    }

                    csv += '\n';
                    for (var i = 0; i < CapSharesGrid.getColumnsNum(); i++) {
                        csv += i == 1 ? ',' : ',' + CapSharesGrid.getFooterLabel(i, 0).replaceAll(',', '').replaceAll('$', '').replaceAll('Â', '');
                    }
                    csv += '\n';
                    for (var i = 0; i < CapSharesGrid.getColumnsNum(); i++) {
                        csv += i == 1 ? ',' : ',' + CapSharesGrid.getFooterLabel(i, 1).replaceAll(',', '').replaceAll('$', '').replaceAll('Â', '');
                    }

                    var hiddenElement = document.createElement('a');
                    hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csv);
                    hiddenElement.target = '_self'; // 
                    hiddenElement.download = 'Financials.csv';  // CSV file Name* you can change it.[only name not .csv] 
                    document.body.appendChild(hiddenElement); // Required for FireFox browser
                    hiddenElement.click();
                }
            });

            eXcell_link.prototype.getTitle = eXcell_link.prototype.getContent;

            var newOpts = Array(Array('save_template', 'obj', 'Save as Template...', null), Array('load_template', 'obj', ' Load from Template...', null));
            // if (!isCommunity || (isCommunity && isAllowEditing)) {
            Toolbar.addButtonSelect("new_metric", 0, "New Account...", newOpts, "plusGreen.png", "plusGreen.png", true, false, 3, false);
            Toolbar.addSeparator("sep1", 1);

            //}
            Toolbar.addButton("new_board_meeting", 9, "New Period", "calendar.webp");
            Toolbar.addButton("Export", 10, "Export", "excel.ico");
            Toolbar.hideItem("new_metric");
            Toolbar.hideItem("new_board_meeting");
            Toolbar.hideItem("sep1");
            Toolbar.setSkin(lSkin);


            Toolbar.attachEvent("onStateChange", function (id, state) {

                //refreshGrid();

                if (id == 'AllowEdits') {
                    FinancialsFeatureDHTMLXController.AllowEditingUpdate(recordId, state, function (result, event) {
                        if (event.type == 'exception') {
                            alert(event.message);
                        }
                    });
                }
            });

            Layout = new dhtmlXLayoutObject({
                parent: "layoutObj",
                pattern: "1C",
                cells: [{ id: "a", text: "dhtmlxGrid" }],
                skin: lSkin
            });
            Layout.cells("a").hideHeader();

            var CapSharesGrid;


            refreshGrid();

            function setDollarAmmount(stage, rId, cInd, nValue, oValue) {

                if (stage == 2) {
                    FinancialsFeatureDHTMLXController.setFinancials(rId, jsRounds[cInd - 2].Id, nValue, function (result, event) {
                        if (event.type == 'exception') {
                            alert(event.message);
                        } else {
                            dhtmlx.message({
                                text: 'Financials Updated.'
                            });
                            refreshGrid();
                        }
                    });
                }

            }

            function deleteBoard(name, sid) {
                var isConfirmed = confirm("Are you sure you'd like to delete the Board Meeting " + name + " ?");
                if (isConfirmed) {
                    FinancialsFeatureDHTMLXController.deleteBoard(sid, function (result, event) {
                        if (event.type == 'exception') {
                            alert(event.message);
                        } else {
                            refreshGrid();
                        }
                    });
                }
            }

            function saveBoard(data, advancedEditWin) {
                console.log(data);
                FinancialsFeatureDHTMLXController.createReportPeriod(JSON.stringify(data), recordId, function (result, event) {
                    if (event.type == 'exception') {
                        alert(event.message);
                    } else {
                        dhtmlx.message({
                            text: 'Report Period was created successfully.'
                        });
                        advancedEditWin.close();
                        refreshGrid();
                    }
                });


            }

            function saveMetric(data, advancedEditWin, accId) {
                var formula = data.getItemValue('Formula');
                if (formula != null && formula != '') {
                    if ((formula.match(/{/g) || []).length != (formula.match(/}/g) || []).length) {
                        dhtmlx.message({
                            type: "alert-error",
                            text: "Please, correct your formula."
                        });
                        return;
                    }
                }

                FinancialsFeatureDHTMLXController.createChartOfAccounts(data.getItemValue('Name'), data.getItemValue('Category'), formula, accId, recordId, function (result, event) {
                    if (event.type == 'exception') {
                        var err = event.message;
                        err = err.replace(err.substring(0, err.indexOf('Unable to')), '').replace(': [Name]', '');
                        dhtmlx.message({
                            type: "alert-error",
                            text: err
                        });
                    } else {
                        dhtmlx.message({
                            text: accId ? 'Metric updated successfully.' : 'Metric created successfully.'
                        });
                        advancedEditWin.close();
                        refreshGrid();
                    }
                });
            }


            function GridMenuHandler(menuitemId, type) {
                var menuData = CapSharesGrid.contextID.split("_");
                if (menuitemId == 'DeleteAccount') {
                    console.log(menuData);
                    var isConfirmed = confirm("Are you sure you would like to delete Account " + CapSharesGrid.cells(menuData[0], 0).getValue().split("^")[0] + " ? This will remove the data row for all Report Periods.");
                    if (isConfirmed) {
                        /*var metricid = CapSharesGrid.cells(menuData[0], 0).getValue().split("^")[1];
                        metricid = metricid.substring(1, metricid.length);*/
                        FinancialsFeatureDHTMLXController.deleteChartOfAccounts(menuData[0], function (result, event) {
                            if (event.type == 'exception') {
                                alert(event.message);
                            } else {
                                refreshGrid();
                            }
                        });
                    }
                } else if (menuitemId == 'EditAccount') {
                    openAccountWindow(menuData[0]);
                }


                /*else if (menuitemId=='DeleteBoardMeeting'){
                    var isConfirmed = confirm("Are you sure you would like to delete the Report Period " + jsRounds[menuData[1]-1].Date__c + "?");
                    if (isConfirmed){
                        FinancialsFeatureDHTMLXController.deleteBoard (jsRounds[menuData[1]-1].Id,function(result, event) {
                            if (event.type == 'exception') {
                                alert(event.message);
                            } else {
                                refreshGrid();
                            }
                        });
                        
                    }
                }*/

                return true;
            }

            function openAccountWindow(accId) {
                var title = 'New Chart of Accounts';

                if (accId != null) {
                    title = 'Edit ' + CapSharesGrid.cells(accId, 0).getValue().split("^")[0];
                }
                var dhxWins = new dhtmlXWindows();
                dhxWins.attachViewportTo("body");
                dhxWins.setSkin(lSkin);
                advancedEditWin = dhxWins.createWindow("w1", 10, 10, 500, 240);
                advancedEditWin.setText(title);
                advancedEditWin.center();
                advancedEditWin.setModal(true);
                advancedEditWin.button("park").hide();
                advancedEditWin.button("minmax").hide();
                var advancedEditWinLayout = advancedEditWin.attachLayout("1C");
                advancedEditWinLayout.setSkin(lSkin);
                advancedEditWinLayout.cells("a").hideHeader();

                var formContent = [{
                    type: "block", list: [
                        { type: "settings", position: "label-left", labelWidth: 160, inputWidth: 220 },
                        { type: "input", name: "Name", label: "Chart of Accounts Name", offsetTop: 10, required: true, value: accId != null ? CapSharesGrid.cells(accId, 0).getValue().split("^")[0] : '' },
                        { type: "select", name: "Category", id: "Category", label: "Category", value: accId != null ? CapSharesGrid.cells(accId, 1).getValue() : "", required: true, options: [{ value: "Revenue", text: "Revenue" }, { value: "Expense", text: "Expense" }, { value: "Metric", text: "Metric" }] },
                        {
                            type: "input", className: "formulaInput", name: "Formula", label: "Formula", rows: 3, hidden: (accId != null && CapSharesGrid.cells(accId, 1).getValue() == 'Metric') ? false : true,
                            required: (accId != null && CapSharesGrid.cells(accId, 1).getValue() == 'Metric') ? true : false,
                            value: (accId != null) ? CapSharesGrid.getUserData(accId, "Formula") : '',
                        },
                    ]
                },

                { type: "block", list: [{ type: "button", name: "save", value: "Save", offsetTop: 10, width: 80, offsetLeft: 140 }, { type: "newcolumn" }, { type: "button", name: "cancel", value: "Cancel", offsetTop: 10, width: 80, offsetLeft: 20 }] }];
                var advancedEditWinForm = advancedEditWinLayout.cells("a").attachForm(formContent);

                tribute.attach(document.querySelectorAll('.formulaInput textarea'));

                advancedEditWinForm.attachEvent("onButtonClick", function (name) {
                    if (advancedEditWinForm.validate() && name == 'save') {
                        saveMetric(advancedEditWinForm, advancedEditWin, accId);
                    } else if (name == 'cancel') {
                        advancedEditWin.close();
                    }
                });

                advancedEditWinForm.attachEvent("onChange", function (name, value, state) {
                    if (name == 'Category') {
                        if (value == 'Metric') {
                            advancedEditWinForm.showItem('Formula');
                            advancedEditWinForm.setRequired('Formula', true);
                        } else {
                            advancedEditWinForm.hideItem('Formula');
                            advancedEditWinForm.setRequired('Formula', false);
                        }
                    }
                    return true;

                });

            }

            function openSaveTemplateWindow() {

                var dhxWins = new dhtmlXWindows();
                dhxWins.attachViewportTo("body");
                dhxWins.setSkin(lSkin);
                advancedEditWin = dhxWins.createWindow("w1", 0, 0, 400, 155);
                advancedEditWin.setText("Save as Chart of Accounts Template");
                advancedEditWin.center();
                advancedEditWin.setModal(true);
                advancedEditWin.button("park").hide();
                advancedEditWin.button("minmax").hide();
                var advancedEditWinLayout = advancedEditWin.attachLayout("1C");
                advancedEditWinLayout.setSkin(lSkin);
                advancedEditWinLayout.cells("a").hideHeader();


                var formContent = [{ type: "block", list: [{ type: "input", label: "Name", name: 'Name', value: accName + ' Chart of Accounts', required: true, skin: lSkin, width: 240, offsetLeft: 40, offsetTop: 20 }] },
                { type: "block", list: [{ type: "button", name: "save", value: "Save", offsetTop: 10, width: 80, offsetLeft: 90 }, { type: "newcolumn" }, { type: "button", name: "cancel", value: "Cancel", offsetTop: 10, width: 80, offsetLeft: 20 }] }
                ];

                var advancedEditWinForm = advancedEditWinLayout.cells("a").attachForm(formContent);


                advancedEditWinForm.attachEvent("onButtonClick", function (name) {
                    if (advancedEditWinForm.validate() && name == 'save') {

                        FinancialsFeatureDHTMLXController.createTemplate(advancedEditWinForm.getItemValue('Name'), recordId, function (result, event) {
                            if (event.type == 'exception') {
                                alert(event.message);
                            } else {
                                dhtmlx.message({
                                    text: 'Template was created successfully.'
                                });
                                advancedEditWin.close();
                            }
                        });

                    } else if (name == 'cancel') {
                        advancedEditWin.close();
                    }
                });
            }

            function openLoadTemplateWindow() {
                var dhxWins = new dhtmlXWindows();
                dhxWins.attachViewportTo("body");
                dhxWins.setSkin(lSkin);
                advancedEditWin = dhxWins.createWindow("w1", 0, 0, 600, 350);
                advancedEditWin.setText("Apply Chart of Accounts Template");
                advancedEditWin.center();
                advancedEditWin.setModal(true);
                advancedEditWin.button("park").hide();
                advancedEditWin.button("minmax").hide();
                var advancedEditWinLayout = advancedEditWin.attachLayout("3U");
                advancedEditWinLayout.setSkin(lSkin);
                advancedEditWinLayout.cells("a").setText("Templates");
                advancedEditWinLayout.cells("b").setText("Preview");
                advancedEditWinLayout.cells("a").hideArrow();
                advancedEditWinLayout.cells("b").hideArrow();
                advancedEditWinLayout.cells("c").hideHeader();
                advancedEditWinLayout.cells("c").setHeight(60);
                advancedEditWinLayout.cells("a").fixSize(true, false);
                advancedEditWinLayout.cells("b").fixSize(true, false);
                advancedEditWinLayout.cells("c").fixSize(true, true);

                var templGrid = advancedEditWinLayout.cells("a").attachGrid();

                templGrid.setHeader("Template Name,&nbsp;");
                templGrid.setInitWidths("*,30");
                templGrid.setColAlign("left,left");
                templGrid.setColTypes("rotxt,img");
                templGrid.setColSorting("str,str");


                templGrid.enableAlterCss("even", "uneven");
                templGrid.enableRowsHover(true, 'grid_hover');


                templGrid.setImagePath("{!URLFOR($Resource.DHTMLX)}" + '/skins/' + dhtmlxSkin + '/imgs/dhxgrid_' + dhtmlxSkin + '/');

                templGrid.setIconsPath("{!URLFOR($Resource.DHTMLX, '/customIcons/')}");


                templGrid.init();
                templGrid.detachHeader(0);

                var previewGrid = advancedEditWinLayout.cells("b").attachGrid();

                previewGrid.setHeader("Name,Category");
                previewGrid.setInitWidths("*,1");
                previewGrid.setColAlign("left,left");
                previewGrid.setColTypes("rotxt,rotxt");
                previewGrid.setColSorting("str,str");


                previewGrid.enableAlterCss("even", "uneven");
                previewGrid.enableRowsHover(true, 'grid_hover');


                previewGrid.setImagePath("{!URLFOR($Resource.DHTMLX)}" + '/skins/' + dhtmlxSkin + '/imgs/dhxgrid_' + dhtmlxSkin + '/');

                previewGrid.setIconsPath("{!URLFOR($Resource.DHTMLX, '/customIcons/')}");


                previewGrid.init();
                previewGrid.detachHeader(0);



                FinancialsFeatureDHTMLXController.getTemplatesData(function (result, event) {
                    if (event.type == 'exception') {
                        alert(event.message);
                    } else {
                        var data = result;
                        data = ($('<div>').html(data).text());
                        console.log(data);
                        templGrid.parse(data, "json");
                    }
                });

                templGrid.attachEvent("onRowSelect", function (id, ind) {
                    if (ind == 1) {
                        dhtmlx.confirm("Delete " + templGrid.cells(id, 0).getValue() + " Template?", function (result) {
                            if (result) {

                                FinancialsFeatureDHTMLXController.deleteTemplate(id, function (result2, event) {
                                    if (event.type == 'exception') {
                                        alert(event.message);
                                    } else {
                                        templGrid.deleteRow(id);
                                        advancedEditWinForm.disableItem("save");
                                        previewGrid.clearAll();
                                    }
                                });


                            }
                        });
                    }
                    advancedEditWinForm.enableItem("save");
                    FinancialsFeatureDHTMLXController.getTemplatesPreview(id, function (result, event) {
                        if (event.type == 'exception') {
                            alert(event.message);
                        } else {
                            var data = result;
                            data = ($('<div>').html(data).text());
                            console.log(data);
                            previewGrid.clearAll();
                            previewGrid.parse(data, "json");
                            //previewGrid.setColumnHidden(1, true);
                            previewGrid.groupBy(1, ["#title"]);
                        }
                    });

                });


                var formContent = [{ type: "block", list: [{ type: "button", name: "save", disabled: true, value: "Apply Template", offsetTop: 10, width: 120, offsetLeft: 210 }] }];

                var advancedEditWinForm = advancedEditWinLayout.cells("c").attachForm(formContent);


                advancedEditWinForm.attachEvent("onButtonClick", function (name) {
                    if (advancedEditWinForm.validate() && name == 'save') {

                        FinancialsFeatureDHTMLXController.applyTemplate(templGrid.getSelectedRowId(), recordId, function (result, event) {
                            if (event.type == 'exception') {
                                var err = event.message;
                                err = err.replace(err.substring(0, err.indexOf('Unable to')), '').replace(': [Name]', '');
                                dhtmlx.message({
                                    type: "alert-error",
                                    text: err
                                });
                            } else {
                                dhtmlx.message({
                                    text: 'Template was loaded successfully.'
                                });
                                advancedEditWin.close();
                                refreshGrid();
                            }
                        });

                    }
                });
            }

            function refreshGrid() {
                Layout.cells("a").progressOn();
                FinancialsFeatureDHTMLXController.getCapTableData(recordId, function (result, event) {
                    if (event.type == 'exception') {
                        alert(event.message);
                    } else {
                        var data = result;
                        isCommunity = data.isCommunity;
                        isAllowEditing = data.allowEditByCommUser;
                        recordId = data.accId;
                        accName = data.accName;
                        if (!isCommunity) {
                            try {
                                Toolbar.getInput("AllowEdits");
                            } catch (e) {
                                Toolbar.addButtonTwoState("AllowEdits", 11, "Editable on the Portal", "pencil.png");
                            }
                        }
                        if (isAllowEditing && !isCommunity) {
                            Toolbar.setItemState("AllowEdits", true, false);
                        }
                        if (isAllowEditing || !isCommunity) {
                            Toolbar.showItem("new_board_meeting");
                            Toolbar.showItem("new_metric");
                            Toolbar.showItem("sep1");
                        }

                        jsRounds = data.rounds;
                        console.log(data);

                        try { CapSharesGrid.destructor(); } catch (e) { }
                        CapSharesGrid = Layout.cells("a").attachGrid();

                        var TableHeaders = 'Chart of Accounts,Category';

                        var TableWidths = '"",""';
                        var TableAligns = 'left,left';
                        var TableColTypes = 'link,rotxt';
                        var TableColSorting = 'str,str';
                        //var SerializableColumns = 'true';
                        var TotalRevenueFooter = 'Total Revenue,';
                        var TotalExpenseFooter = 'Total Expenses,';
                        var TotalRevenueFooterStyles = ["color:#04844b", "color:#04844b"];
                        var TotalExpenseFooterStyles = ["color:#ff9a3c", "color:#ff9a3c"];

                        var i = 1;
                        var rowTotalCol = '';

                        rowTotalCol = 'ron[=';
                        CapSharesGrid.setMathRound(0);


                        exportHeaderLabels = 'Metric,Category';

                        var rows = [];
                        for (let row of data.rows) {

                            var newRow = { 'key': row, 'value': row };
                            rows.push(newRow);
                        }
                        try {
                            console.log(tribute);
                            tribute.appendCurrent(rows);
                        } catch (e) {
                            tribute.collection[0].values = [];
                            tribute.append(0, rows);
                        }



                        for (let item of data.rounds) {

                            //SerializableColumns += ',true';
                            let current_datetime = new Date(item.Date__c);
                            let formatted_date = current_datetime.getFullYear() + "-" + (current_datetime.getMonth() + 1) + "-" + current_datetime.getDate();
                            TableHeaders += ',' + '<div style="width:100%; text-align:left;position: absolute;height: 100%;" onmouseenter="showRoundTooltip(this)" onmouseleave="hideRoundTooltip(this)"   id="' + item.Id + '">' + formatted_date;
                            exportHeaderLabels += ',' + formatted_date;

                            TableHeaders += '<div id="' + item.Id + '-popup" class="popupDiv" onclick="event.stopPropagation()"><div style="display:inline-block">';

                            TableHeaders += '<div style="float:left;clear: both;min-width: 120px; text-transform: uppercase; text-align: left; "><a style="color:   #006dcc !important;" href="/' + item.Id + '">' + formatted_date + '</a></div>';

                            /*if (!isCommunity || (isCommunity && isAllowEditing)){
                                TableHeaders+='<div style="float:left;float: right;text-transform: capitalize; font-size: 11px; margin-bottom: 5px;  cursor: pointer;" onclick="deleteBoard(\'' + formatted_date + '\'\\,\'' + item.Id + '\')">Delete Report Period</div>';
                            }*/



                            TableHeaders += '</div></div></div>';
                            TableWidths += ',""';
                            TableAligns += ',left';

                            TableColTypes += ',edn';


                            TableColSorting += ',int';

                            TotalRevenueFooter += ',#stat_sumR';
                            TotalExpenseFooter += ',#stat_sumE';
                            TotalRevenueFooterStyles.push("color:#04844b");
                            TotalExpenseFooterStyles.push("color:#ff9a3c");
                            i++;
                        }

                        GridMenu = new dhtmlXMenuObject();
                        GridMenu.renderAsContextMenu();
                        GridMenu.attachEvent("onClick", GridMenuHandler);
                        GridMenu.loadStruct('{items:[{id: "DeleteAccount", text: "Delete Account..."},{id: "EditAccount", text: "Edit Account..."}]}');

                        if (!isCommunity || (isCommunity && isAllowEditing)) {
                            CapSharesGrid.enableContextMenu(GridMenu);
                        }
                        CapSharesGrid.setHeader(TableHeaders);


                        //calculation of the total Revenue
                        CapSharesGrid._in_header_stat_sumR = function (tag, index, data) {
                            var calc = function () {
                                var sumR = 0;
                                this.forEachRow(function (id) {
                                    if (CapSharesGrid.cells(id, 1).getValue() == 'Revenue') {
                                        sumR += this.cellById(id, index).getValue() * 1;
                                    }

                                })
                                return this._aplNF(sumR, 0).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");;
                            }
                            this._stat_in_header(tag, calc, index, data);
                        }

                        //calculation of the total Expenses
                        CapSharesGrid._in_header_stat_sumE = function (tag, index, data) {
                            var calc = function () {
                                var sumE = 0;
                                this.forEachRow(function (id) {
                                    if (CapSharesGrid.cells(id, 1).getValue() == 'Expense') {
                                        sumE += this.cellById(id, index).getValue() * 1;
                                    }
                                })
                                return this._aplNF(sumE, 0).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                            }
                            this._stat_in_header(tag, calc, index, data);
                        }

                        // set values ofr Total
                        console.log(TotalRevenueFooterStyles);
                        CapSharesGrid.attachFooter(TotalRevenueFooter, TotalRevenueFooterStyles);//#04844b
                        CapSharesGrid.attachFooter(TotalExpenseFooter, TotalExpenseFooterStyles);




                        //                    
                        CapSharesGrid.setInitWidths(TableWidths);
                        CapSharesGrid.setColAlign(TableAligns);
                        CapSharesGrid.setColTypes(TableColTypes);
                        CapSharesGrid.setColSorting(TableColSorting);

                        //CapSharesGrid.setSerializableColumns(SerializableColumns);
                        CapSharesGrid.enableAlterCss("even", "uneven");
                        CapSharesGrid.enableRowsHover(true, 'grid_hover');
                        CapSharesGrid.setImagePath("{!URLFOR($Resource.DHTMLX)}" + '/skins/' + dhtmlxSkin + '/imgs/dhxgrid_' + dhtmlxSkin + '/');
                        CapSharesGrid.init();

                        CapSharesGrid.serializeToCSV(true);

                        for (var i = 0; i < data.rounds.length + 1; i++) {

                            CapSharesGrid.setNumberFormat("0,000", i + 1, ".", ",");

                        }
                        //CapSharesGrid.clearAll();
                        var res = data.data;
                        res = ($('<div>').html(res).text());
                        CapSharesGrid.parse(res, "json");
                        Layout.cells("a").progressOff();
                        CapSharesGrid.setColumnHidden(1, true);
                        CapSharesGrid.groupBy(1, ["#title"]);


                        CapSharesGrid.attachEvent("onCellChanged", function (rId, cInd, nValue) {
                            CapSharesGrid.callEvent("onGridReconstructed", []);
                        });

                        CapSharesGrid.attachEvent("onRowDblClicked", function (rId, cInd) {
                            if ((!isCommunity || (isCommunity && isAllowEditing)) && (CapSharesGrid.cells(rId, 1).getValue() != 'Metric')) {
                                return true;
                            }
                            return false;
                        });

                        CapSharesGrid.attachEvent("onEditCell", function (stage, rId, cInd, nValue, oValue) {
                            console.log(stage, rId, cInd, nValue, oValue);
                            setDollarAmmount(stage, rId, cInd, nValue, oValue);
                            if (stage == 1) {
                                this.editor.obj.onkeypress = function (e) {  //editor area
                                    var ValidChars = "0123456789";
                                    if (ValidChars.indexOf((String.fromCharCode((e || event).keyCode))) == -1)
                                        return false;//allow
                                    else
                                        return true; //deny
                                }
                                return true;
                            }
                            return true;
                        });



                        CapSharesGrid.attachEvent("onBeforeContextMenu", function (id, ind) {
                            CapSharesGrid.selectRowById(id, true);
                            if (ind != 0) {
                                GridMenu.hideItem('EditAccount');
                                GridMenu.hideItem('DeleteAccount');
                            } else {
                                GridMenu.showItem('EditAccount');
                                GridMenu.showItem('DeleteAccount');
                            }
                            return true;
                        });



                    }
                });

            }

            function hideRoundTooltip(e) {
                $("#" + e.id + '-popup').hide();
            }

            function showRoundTooltip(e) {
                $("#" + e.id + '-popup').show();
            }



            function stopPropagation(e) {
                e.stopImmediatePropagation();
            }

            String.prototype.replaceAll = function (search, replace) {
                return this.split(search).join(replace);
            }

            if (window.attachEvent)
                window.attachEvent("onresize", resizeLayout);
            else
                window.addEventListener("resize", resizeLayout, false);
            function resizeLayout() {
                window.clearTimeout(t);
                var t = window.setTimeout(function () {
                    Layout.setSizes(false);
                }, 200);
            }

        </script>

    </body>
</apex:page>